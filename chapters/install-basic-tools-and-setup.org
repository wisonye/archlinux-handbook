* Install basic tools and setup

** Add a new user when needed

#+BEGIN_SRC bash
  # Add new user
  useradd -m -G wheel YOUR_USER_NAME

  # Set password
  passwd YOUR_USER_NAME
#+END_SRC


** Install and configure =doas=

#+BEGIN_SRC bash
  pacman --sync --refresh opendoas
  
#+END_SRC


Then create =/etc/doas.conf= with the following settings:

#+BEGIN_SRC conf
  #
  # nopass   The user is not required to enter a password.
  # keepenv  Environment variables other than those listed in doas(1) are
  #          retained when creating the environment for the new process.
  #
  # Read `man doas.conf` for more details
  #
  permit nopass keepenv setenv { PATH } YOUR_USER_NAME as root
#+END_SRC

</br>

Make sure to change the file permission:

#+BEGIN_SRC bash
  chown -c root:root /etc/doas.conf
  chmod -c 0400 /etc/doas.conf
#+END_SRC


** Install everything I need

#+BEGIN_SRC bash
  doas pacman --sync --refresh tree git git-delta bat ripgrep procs htop btop fastfetch fzf fish lf neovim python-pynvim tmux emacs-nativecomp aspell aspell-en base-devel man-db man-pages

  #
  # Hyprland
  #
  doas pacman --sync --refresh hyprland xdg-desktop-portal-hyprland dunst qt6-wayland wl-clipboard alacritty tmux waybar mpv yt-dlp grim slurp nsxiv
#+END_SRC


** Change =fish= as default shell

#+BEGIN_SRC bash
  chsh -s /usr/bin/fish
#+END_SRC

Relogin to take effect.


** Create and copy GIT SSH key

#+BEGIN_SRC bash
  ssh-keygen -t ed25519 -C "YOUR_EMAIL_HERE"

  #
  # If you're using `Fish` shell, then better change to `bash` before you run
  # this command:
  #
  # bash
  #
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/id_ed25519

  #
  # Then ssh into this machine, cat the pub key and create SSH key on Github settings
  #
  cat ~/.ssh/id_ed25519.pub | wl-copy
#+END_SRC


** Setup git

#+BEGIN_SRC bash
  git config --global user.name "YOUR_PREFFERED_USER_NAME_HERE"
  git config --global user.email "YOUR_EMAIL_HERE"

  git config --global pull.rebase false
  git config --global core.pager delta
  git config --global interactive.diffFilter "delta --color-only"
  git config --global delta.navigate true
  git config --global delta.light false
  git config --global delta.line-numbers true
  git config --global delta.side-by-side true
  git config --global delta.show-syntax-themes true
  git config --global merge.conflictstyle diff3
  git config --global diff.colorMoved default
#+END_SRC


** Install =Rust=, as =paru= needs it

#+BEGIN_SRC bash
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

  rustup component add rust-analyzer
#+END_SRC

Then relogin to take effects.


** Install =paru= - packages from =AUR (Arch User Repository)=

You have to install =sudo=, as =paru= uses it!!!

#+BEGIN_SRC bash
  # Switch to root
  su

  # Install sudo if not yet
  pacman --sync --refresh sudo

  # Allow `wheel` group to use `sudo`
  doas visudo
#+END_SRC


You need to install =rustup= first if not yet:

#+BEGIN_SRC bash
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#+END_SRC


Install =paru=:

#+BEGIN_SRC bash
  mkdir ~/temp && cd ~/temp

  sudo pacman -S --needed git base-devel
  git clone https://aur.archlinux.org/paru.git
  cd paru

  #
  # Choose '2', install `cargo` via `rustup` for a small download size!!!
  #
  makepkg -si

  #
  # If `makepkg -si` exit with error, then plz make sure to added the latest stable toolchain
  #
  rustup toolchain add stable

  #
  # Or if you've already install the stable toolchain, then update it
  #
  rustup update


  cd ~/temp && rm -rf paru
#+END_SRC



** Wallpaper related if you needed

#+BEGIN_SRC bash
  #
  # Wallpaper backend:
  #
  # Make sure to select =swww= (default =1=) rather than the =swww-git= (outdated)
  # and choose =rustup= (option =2=)!!!
  #
  paru --sync --refresh swww
#+END_SRC


*** How to set wallpaper

#+BEGIN_SRC bash
  #
  # Init once
  #
  swww init

  #
  # Set wallpaper
  #
  swww img YOUR_WALLPAPER_FILENAME_HERE

  #
  # Apply transition when changing wallpaper
  #
  www img --transition-type wipe --transition-angle 45 YOUR_WALLPAPER_FILENAME_HERE
#+END_SRC


*** =waypaper= (GUI - frontend)

**** Install

#+BEGIN_SRC bash
  paru --sync --refresh waypaper
#+END_SRC


**** how to run

#+BEGIN_SRC bash
  #
  # Run with given backend, you only need to pass for the first time
  # and then 'waypaper' will keep using it
  #
  waypaper --backend swww
#+END_SRC

You might get the following error when choosing a wallpaper : =No such file or directory: swaybg=

That's you got a wrong settings in =~/.config/waypaper/config.ini=, open and fix it like below:

Pay attention to the =backend= setting!!!

#+BEGIN_SRC bash
  cat ~/.config/waypaper/config.ini

  # [Settings]
  # folder = /home/wison/Photos/wallpaper
  # fill = Fill
  # sort = name
  # backend = swww
  # color = #FFFFFF
  # language = en
  # subfolders = False
  # wallpaper = /home/wison/Photos/wallpaper/forest.jpg
  # monitors = All
#+END_SRC


**** In Hyperland configuration 

#+BEGIN_SRC bash
  #
  # Reset to the last chosen wallpaper
  #
  exec-once = waypaper --restore
#+END_SRC



** Generate dynamic colors from a given wallpaper

#+BEGIN_SRC bash
  doas pacman --sync --refresh pywal-16-colors
#+END_SRC

Then you can run =wal -i {FULLPATH_WALLPAPER_HERE}= to generate ~/.cache/wal~ folder that contains a lot of supported color templates.

You can add your own template files to =~/.config/wal/templates= folder to support what it's missing. Basically, you just need to add those ={colorX.strip}= templates in the correct syntax for your export target to set the special env vars.

For example, for =Hyprland= and =Fish=, you need to add the following template files to =~/.config/wal/templates=:

***  =~/.config/wal/templates/colors-hyprland.conf=

#+BEGIN_SRC conf
  $foreground = rgb({foreground.strip})
  $background = rgb({background.strip})
  $wallpaper = {wallpaper}

  $color0 = rgb({color0.strip})
  $color1 = rgb({color1.strip})
  $color2 = rgb({color2.strip})
  $color3 = rgb({color3.strip})
  $color4 = rgb({color4.strip})
  $color5 = rgb({color5.strip})
  $color6 = rgb({color6.strip})
  $color7 = rgb({color7.strip})
  $color8 = rgb({color8.strip})
  $color9 = rgb({color9.strip})
  $color10 = rgb({color10.strip})
  $color11 = rgb({color11.strip})
  $color12 = rgb({color12.strip})
  $color13 = rgb({color13.strip})
  $color14 = rgb({color14.strip})
  $color15 = rgb({color15.strip})
#+END_SRC


***  =~/.config/wal/templates/colors-fish.fish=

#+BEGIN_SRC conf
  set --export foreground {foreground.strip}
  set --export background {background.strip}
  set --export color0 {color0.strip}
  set --export color1 {color1.strip}
  set --export color2 {color2.strip}
  set --export color3 {color3.strip}
  set --export color4 {color4.strip}
  set --export color5 {color5.strip}
  set --export color6 {color6.strip}
  set --export color7 {color7.strip}
  set --export color8 {color8.strip}
  set --export color9 {color9.strip}
  set --export color10 {color10.strip}
  set --export color11 {color11.strip}
  set --export color12 {color12.strip}
  set --export color13 {color13.strip}
  set --export color14 {color14.strip}
  set --export color15 {color15.strip}
#+END_SRC


*** Handy script to pick a wallpaper randomly and call =wal -i= to generate the corresponding colors

Here is my =~/.config/waybar/scripts/random_wallpaper_update_colors.sh=:

#+BEGIN_SRC bash
  #!/usr/bin/fish

  set wallpaper_folder $argv[1]

  #
  # `if` help:  https://fishshell.com/docs/current/language.html#the-if-statement
  # `test` help: https://fishshell.com/docs/current/cmds/test.html
  #
  if test -z $wallpaper_folder
     echo "Usage: change_wallpaper.sh [wallpaper_folder]"
     exit 0
  end

  set random_file (ls $wallpaper_folder |sort -R |tail -n1)
  set fullpath_wallpaper "$wallpaper_folder$random_file"
  echo "wallpaper_folder: $wallpaper_folder"
  echo "random_file: $random_file"
  echo "fullpath_wallpaper: $fullpath_wallpaper"

  swww img --transition-type none $fullpath_wallpaper && wal -i $fullpath_wallpaper
  pkill waybar
  # sleep 1
  dbus-run-session waybar > ~/.waybar.log
#+END_SRC

It accepts a fullpath image filename to set as wallpaper and call =wal= to generate corresponding colors and reload =waybar=.


** Cava: Console-based Audio Visualizer for Alsa

#+BEGIN_SRC bash
  paru --sync --refresh cava
#+END_SRC


If you want waybar support, then you have to remove the installed =waybar=, as the package version doesn't support =cava= module. You need to install the supported version by =paru=:

#+BEGIN_SRC bash
  doas pacman -Rsun waybar

  paru --sync --refresh waybar-cava
#+END_SRC


After that, enable the "cava" module in your =~/.config/waybar/config=.


** Vim-liked keybindings document (PDF) viewer: 

#+BEGIN_SRC bash
  doas pacman --sync --refresh zathura zathura-pdf-poppler

  #
  # Create a symbol link
  #
  doas ln -s /usr/bin/zathura /usr/bin/pdfviewer
#+END_SRC

Then, run =pdfviewer YOUR_PDF_FILE=


Keybindings

| Keybindings     | Description                      |
|-----------------+----------------------------------|
| [Open and quit] |                                  |
| =q=               | Quit                             |
| =:open=           | Open                             |
| [Navigation]    |                                  |
| =J/space=         | Next page                        |
| =K=               | Prev page                        |
| =j=               | Move down                        |
| =k=               | Move up                          |
| =C-d=             | Page down                        |
| =C-u=             | Page up                          |
| =gg=              | Go to first page                 |
| =G=               | Go to last page                  |
| =Xgg=             | Go to page X, =10gg= go to page 10 |
| [Fit window]    |                                  |
| =a=               | Fit with window height           |
| =s=               | Fit with window width            |
| =d=               | Toggle double-page mode          |
| [Zoom]          |                                  |
| =-=               | Zoom-out                         |
| =+=               | Zoom-in                          |
| =               | Overview all pages               |
| [Rotation]      |                                  |
| =r=               | Rotate the page                  |
| [Search]        |                                  |
| /               | Search                           |


** Run =Hyprland=

You should make sure that the following services are running:

#+BEGIN_SRC bash
  systemctl --user status pipewire wireplumber 
#+END_SRC

Otherwise, enbable it before starting =Hyprland=.

#+BEGIN_SRC bash
  Hyprland
#+END_SRC



Also, =xdg-desktop-portal-hyprland= should start automatically:

#+BEGIN_SRC bash
  procs desktop

  # PID:▲ User  │ TTY CPU MEM CPU Time │ Command
  #             │     [%] [%]          │
  # 923   wison │     0.0 0.0 00:00:00 │ /usr/lib/xdg-desktop-portal
  # 951   wison │     0.0 0.1 00:00:00 │ /usr/lib/xdg-desktop-portal-hyprland
  # 1339  wison │     0.0 0.0 00:00:00 │ /usr/lib/xdg-desktop-portal
  # 1370  wison │     0.0 0.1 00:00:00 │ /usr/lib/xdg-desktop-portal-hyprland
#+END_SRC

Have a look at here to know more about =xdg-desktop-portal-hyprland (XDPH)=:
https://wiki.hyprland.org/Useful-Utilities/xdg-desktop-portal-hyprland/
