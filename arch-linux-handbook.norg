*  My Arch Linux Handbook

  ** Connect to WIFI during installation

     You can use [[https://wiki.archlinux.org/title/iwd][iwctl]] to do the job.

    *** Enable your WIFI NIC

        Make sure to change the *wlan0* to yours if your NIC doesn't *wlan0*, print the NIC name by running `ip add`

        @code bash
        ip link set wlan0 up
        @end


        You can list all WIFI devices like this:

        @code bash
        iwctl device list
        @end

        Show its status:

        @code bash
        iwctl device wlan0 show
        @end

        If the device or its corresponding adapter is turned off, turn it on before the next step:

        @code bash
        iwctl device wlan0 set-property Powered on
        iwctl adapter wlan0 set-property Powered on
        @end


    *** Scan your WIFI SSID

        If you don't know the *SSID* or not sure your *SSID* is scannable or not, then run it to confirm

        @code bash
        iwlist station wlan0 scan | grep SSID
        @end


    *** Connet to WIFI

        @code bash
        #
        # Connect to public SSID
        #
        iwctl station wlan0 connect "SSID"

        #
        # Or connect to hidden SSID
        #
        iwctl station wlan0 connect-hidden "SSID"

        #
        # After that, check your IP address
        #
        ip add
        @end

        Maybe you need to run *dhcpcd &* to grab a new IP if your router doesn't do that for you.

        After you can access to internet, enable *NTP* to sync your clock

        @code bash
        timedatectl set-ntp true
        @end

  ** Package management
    *** Enable *Color* settings

        Open */etc/pacman.conf* and enable *Color* and save.


    *** Setup mirrorlist

        */etc/pacman.d/mirrorlist* should be set during the *archinstall* process, just in case, here is New Zealand mirrors: 

        @code conf
        ################################################################################
        ################# Arch Linux mirrorlist generated by Reflector #################
        ################################################################################

        # With:       reflector @/etc/xdg/reflector/reflector.conf
        # When:       2024-05-17 03:15:28 UTC
        # From:       https://archlinux.org/mirrors/status/json/
        # Retrieved:  2024-05-17 03:14:04 UTC
        # Last Check: 2024-05-17 03:08:34 UTC

        Server * https://mirror.2degrees.nz/archlinux/$repo/os/$arch
        Server * https://archlinux.ourhome.kiwi/$repo/os/$arch
        @end


    *** Upgrade everything

        @code bash
        doas pacman --sync --refresh  
        doas pacman -Syu
        @end


    *** Search packages to install

        @code bash
        doas pacman --sync --search  
        @end


    *** Install and remove

        @code bash
        # Install package by name
        doas pacman --sync --refresh   PACKAGE_NAME

        # Remove package by name
        doas pacman -Rsun PACKAGE_NAME
        @end


    *** Query already installed packages

        @code bash
        pacman --query | sort | bat
        @end


    *** Show installed package detail

        @code bash
        pacman --sync --info PACKAGE_NAME
        @end


    *** List installed package files

        @code bash
        pacman --query --list PACKAGE_NAME
        @end


    *** Remove unused (dependencies) packages

        List only before removing:

        @code bash
        # -Q: Query packages.
        # -d: List packages installed as dependencies [filter].
        # -q: Show less information for query and search.
        # -t: List packages not (optionally) required by any.
        pacman -Qqtd 
        @end


        After you confirm, remove all of them:

        @code bash
        # -R: Remove packages.
        # -s: Remove unnecessary dependencies.
        # -u: Remove unneeded packages.
        # -n: Remove configuration file(s) too.
        # - : Read package list from standard input/pipe. In this case read
        #     output of query command (pacman -Qqd) and remove them using
        #     the pacman -Rns - command.
        pacman -Qtdq | doas pacman -Rns - 
        @end



  ** Network configuration via *netctl*
    *** Setup ethernet static ip without *netctl*

        Add DNS name server to */etc/resolv.conf*, for example:

        @code conf
        nameserver 192.168.1.200
        options edns0 trust-ad
        search .
        @end


        Then, assign static IP to ethernet NIC and add a default route:

        @code bash
        #
        # Replace `NIC` to yours
        # Replace `IP_ADDRESS` to yours, e.g. `192.168.1.99/24`
        #
        ip address add IP_ADDRESS dev NIC


        #
        # Active the NIC
        #
        # Replace `NIC` to yours
        #
        ip link set NIC up


        #
        # Add default route to your routing table if it doesn't exists yet
        #
        ip route add default via YOUR_ROUTER_IP dev NIC
        @end


        Now, you should be able to connect to internet via your home router.


    *** Install *netctl*

        - [[https://wiki.archlinux.org/index.php/netctl][netctl]]: A CLI and profile-based network manager.

        - *ifplugd*: A daemon which will automatically configure your Ethernet device when a cable is plugged in and automatically unconfigure it if the cable is pulled.

        - *wpa_supplicant*: A utility providing key negotiation for WPA wireless networks.

        - *dhcpcd*: DHCP/ IPv4LL/ IPv6RA/ DHCPv6 client.

        @code bash
        doas pacman --sync --refresh netctl ifplugd wpa_supplicant dhcpcd
        @end


    *** Ethernet

        Copy the example ethernet profile to */etc/netctl/*:

        @code bash
        #
        # Run `ip addr` to check your ethernet NIC name!!!
        #
        doas cp -rvf /etc/netctl/examples/ethernet-dhcp /etc/netctl/NIC_NAME_HERE-dhcp

        @end


        After that, make sure replace the NIC_NMAE inside the *NIC_NAME_HERE-dhcp* file, my *cat /etc/netctl/enp2s0-dhcp* output as an example:

        @code conf
        Description*'A basic dhcp ethernet connection'
        Interface*enp2s0
        Connection*ethernet
        IP*dhcp
        @end


        Finally, enable *ifplugd* to automatically connect to any available wired network:

        @code bash
        systemctl enable netctl-ifplugd@NIC_NAME_HERE.service
        @end


    *** WIFI

        Copy the example wireless profile to */etc/netctl/*:

        @code bash
        doas cp -rvf /etc/netctl/examples/wireless-wpa ./NIC_NAME_HERE-dhcp
        @end

        That *NIC_NAME_HERE-dhcp* (filename) is known as *netctl profile name*!!!


        After that, edit *NIC_NAME_HERE-dhcp* to change the nic name, WIFI *SSID* and *KEY* (encrypted password in HEX string)

        @code conf
        #
        # Go to the bottom, run the command below to read the 
        # `wpa_passphrase` result into current file.
        #
        :r !wpa_passphrase YOUR_SSID_HERE YOUR_WIFI_PASSWORD_TEXT_HERE | grep psk

        #
        # After that, you should get something like this:
        # psk*"XXXXXX" // That's encrypted WIFI PASS in HEX string
        # 
        # So you need to copy that "XXXX" hex string and make it looks like below
        # to set the `Key` value.
        # Make sure the value start with `\"` and then follow your HEX string
        #
        Key*\"XXXXXX

        # Finally, enable the `Hidden*yes` line if your SSID is hidden.
        # Then save and exit
        @end


        My *cat /etc/netctl/wlp3s0* output as an example:

        @code conf
        Description*'A simple WPA encrypted wireless connection'
        Interface*wlp3s0
        Connection*wireless

        Security*wpa
        IP*dhcp

        ESSID*'MY-SSID'
        Hidden*yes
        Key*\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

        # Set a priority for automatic profile selection
        #Priority*10
        @end


        Finally, make sure enable the profile to auto start:

        @code bash
        netctl enable PROFILE_NAME_HERE

        #
        # Restart profile when needed
        #
        netctl restart PROFILE_NAME_HERE

        #
        # Check porfile status
        #
        netctl status PROFILE_NAME_HERE
        @end


    *** Thinkpad X1 Yoga Gen 3

        Ethernet uses *e1000e* module and WIFI use *iwlwifi* module.

        @code bash
        00:1f.6 Ethernet controller: Intel Corporation Ethernet Connection (4) I219-LM (rev 21)
        Subsystem: Lenovo Device 2259
        Flags: bus master, fast devsel, latency 0, IRQ 140
        Memory at ee300000 (32-bit, non-prefetchable) [size*128K]
        Capabilities: <access denied>
        Kernel driver in use: e1000e
        Kernel modules: e1000e

        02:00.0 Network controller: Intel Corporation Wireless 8265 / 8275 (rev 78)
        Subsystem: Intel Corporation Dual Band Wireless-AC 8265 [Windstorm Peak]
        Flags: bus master, fast devsel, latency 0, IRQ 158
        Memory at ee200000 (64-bit, non-prefetchable) [size*8K]
        Capabilities: <access denied>
        Kernel driver in use: iwlwifi
        Kernel modules: iwlwifi
        @end

  ** Install basic tools and setup
    *** Add a new user when needed

        @code bash
        # Add new user
        useradd -m -G wheel YOUR_USER_NAME

        # Set password
        passwd YOUR_USER_NAME
        @end


    *** Install and configure *doas*

        @code bash
        pacman --sync --refresh opendoas

        @end


        Then create */etc/doas.conf* with the following settings:

        @code conf
        #
        # nopass   The user is not required to enter a password.
        # keepenv  Environment variables other than those listed in doas(1) are
        #          retained when creating the environment for the new process.
        #
        # Read `man doas.conf` for more details
        #
        permit nopass keepenv setenv { PATH } YOUR_USER_NAME as root
        @end

        Make sure to change the file permission:

        @code bash
        chown -c root:root /etc/doas.conf
        chmod -c 0400 /etc/doas.conf
        @end


    *** Install everything I need

        @code bash
        doas pacman --sync --refresh tree git git-delta bat ripgrep procs htop btop fastfetch fzf fish lf neovim python-pynvim tmux emacs-nativecomp aspell aspell-en base-devel man-db man-pages netctl ifplugd wpa_supplicant dhcpcd

        #
        # Hyprland
        #
        doas pacman --sync --refresh hyprland xdg-desktop-portal-hyprland dunst qt6-wayland wl-clipboard alacritty tmux waybar mpv yt-dlp grim slurp nsxiv pavucontrol pamixer brightnessctl
        @end


    *** Change *fish* as default shell

        @code bash
        chsh -s /usr/bin/fish
        @end

        Relogin to take effect.


    *** Create and copy *git* SSH key

        @code bash
        ssh-keygen -t ed25519 -C "YOUR_EMAIL_HERE"

        #
        # If you're using `Fish` shell, then better change to `bash` before you run
        # this command:
        #
        # bash
        #
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_ed25519

        #
        # Then ssh into this machine, cat the pub key and create SSH key on Github settings
        #
        cat ~/.ssh/id_ed25519.pub | wl-copy
        @end


    *** Setup *git*

        @code bash
        git config --global user.name "YOUR_PREFFERED_USER_NAME_HERE"
        git config --global user.email "YOUR_EMAIL_HERE"

        git config --global pull.rebase false
        git config --global core.pager delta
        git config --global interactive.diffFilter "delta --color-only"
        git config --global delta.navigate true
        git config --global delta.light false
        git config --global delta.line-numbers true
        git config --global delta.side-by-side true
        git config --global delta.show-syntax-themes true
        git config --global merge.conflictstyle diff3
        git config --global diff.colorMoved default
        git config --global init.defaultBranch master
        @end


    *** Install *Rust*, as *paru* needs it

        @code bash
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

        rustup component add rust-analyzer
        @end

        Then relogin to take effects.


    *** Install *paru* *AUR*

        You have to install *sudo*, as *paru* uses it!!!

        @code bash
        # Switch to root
        su

        # Install sudo if not yet
        pacman --sync --refresh sudo

        # Allow `wheel` group to use `sudo`
        doas visudo
        @end


        You need to install *rustup* first if not yet:

        @code bash
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        @end


        Install *paru*:

        @code bash
        mkdir ~/temp && cd ~/temp

        sudo pacman -S --needed git base-devel
        git clone https://aur.archlinux.org/paru.git
        cd paru

        #
        # Choose '2', install `cargo` via `rustup` for a small download size!!!
        #
        makepkg -si

        #
        # If `makepkg -si` exit with error, then plz make sure to added the latest stable toolchain
        #
        rustup toolchain add stable

        #
        # Or if you've already install the stable toolchain, then update it
        #
        rustup update


        cd ~/temp && rm -rf paru
        @end



    *** Wallpaper related if you needed

        @code bash
        #
        # Wallpaper backend:
        #
        # Make sure to select =swww= (default =1=) rather than the =swww-git= (outdated)
        # and choose =rustup= (option =2=)!!!
        #
        paru --sync --refresh swww
        @end


        **** *pywal-16-colors*

             Generate and change color-schemes on the fly by

             @code bash
             paru --sync --refresh pywal-16-colors
             @end


        **** Setup wallpaper

             @code bash
             #
             # Init once
             #
             swww init

             #
             # Set wallpaper
             #
             swww img YOUR_WALLPAPER_FILENAME_HERE

             #
             # Apply transition when changing wallpaper
             #
             www img --transition-type wipe --transition-angle 45 YOUR_WALLPAPER_FILENAME_HERE
             @end


        **** *waypaper* (GUI - frontend)

            ***** Install

                  @code bash
                  paru --sync --refresh waypaper
                  @end


            ***** how to run

                  @code bash
                  #
                  # Run with given backend, you only need to pass for the first time
                  # and then 'waypaper' will keep using it
                  #
                  waypaper --backend swww
                  @end

                  You might get the following error when choosing a wallpaper : *No such file or directory: swaybg*

                  That's you got a wrong settings in *~/.config/waypaper/config.ini*, open and fix it like below:

                  Pay attention to the *backend* setting!!!

                  @code bash
                  cat ~/.config/waypaper/config.ini

                  # [Settings]
                  # folder = /home/wison/Photos/wallpaper
                  # fill = Fill
                  # sort = name
                  # backend = swww
                  # color = #FFFFFF
                  # language = en
                  # subfolders = False
                  # wallpaper = /home/wison/Photos/wallpaper/forest.jpg
                  # monitors = All
                  @end


            ***** In Hyperland configuration 

                  @code bash
                  #
                  # Reset to the last chosen wallpaper
                  #
                  exec-once = waypaper --restore
                  @end



    *** Generate dynamic colors from a given wallpaper

        @code bash
        doas paru --sync --refresh pywal-16-colors
        @end

        Then you can run *wal -i {FULLPATH_WALLPAPER_HERE}* to generate `/.cache/wal` folder that contains a lot of supported color templates.

        You can add your own template files to *~/.config/wal/templates* folder to support what it's missing. Basically, you just need to add those *{colorX.strip}* templates in the correct syntax for your export target to set the special env vars.

        For example, for *Hyprland* and *Fish*, you need to add the following template files to *~/.config/wal/templates*:

        ****  *~/.config/wal/templates/colors-hyprland.conf*

              @code conf
              $foreground = rgb({foreground.strip})
              $background = rgb({background.strip})
              $wallpaper = {wallpaper}

              $color0 = rgb({color0.strip})
              $color1 = rgb({color1.strip})
              $color2 = rgb({color2.strip})
              $color3 = rgb({color3.strip})
              $color4 = rgb({color4.strip})
              $color5 = rgb({color5.strip})
              $color6 = rgb({color6.strip})
              $color7 = rgb({color7.strip})
              $color8 = rgb({color8.strip})
              $color9 = rgb({color9.strip})
              $color10 = rgb({color10.strip})
              $color11 = rgb({color11.strip})
              $color12 = rgb({color12.strip})
              $color13 = rgb({color13.strip})
              $color14 = rgb({color14.strip})
              $color15 = rgb({color15.strip})
              @end


        ****  *~/.config/wal/templates/colors-fish.fish*

              @code conf
              set --export foreground {foreground.strip}
              set --export background {background.strip}
              set --export color0 {color0.strip}
              set --export color1 {color1.strip}
              set --export color2 {color2.strip}
              set --export color3 {color3.strip}
              set --export color4 {color4.strip}
              set --export color5 {color5.strip}
              set --export color6 {color6.strip}
              set --export color7 {color7.strip}
              set --export color8 {color8.strip}
              set --export color9 {color9.strip}
              set --export color10 {color10.strip}
              set --export color11 {color11.strip}
              set --export color12 {color12.strip}
              set --export color13 {color13.strip}
              set --export color14 {color14.strip}
              set --export color15 {color15.strip}
              @end


        **** Handy script to pick a wallpaper randomly

             Here is my *~/.config/waybar/scripts/random_wallpaper_update_colors.sh*:

             @code bash
             #!/usr/bin/fish

             set wallpaper_folder $argv[1]

             #
             # `if` help:  https://fishshell.com/docs/current/language.html#the-if-statement
             # `test` help: https://fishshell.com/docs/current/cmds/test.html
             #
             if test -z $wallpaper_folder
             echo "Usage: change_wallpaper.sh [wallpaper_folder]"
             exit 0
             end

             set random_file (ls $wallpaper_folder |sort -R |tail -n1)
             set fullpath_wallpaper "$wallpaper_folder$random_file"
             echo "wallpaper_folder: $wallpaper_folder"
             echo "random_file: $random_file"
             echo "fullpath_wallpaper: $fullpath_wallpaper"

             swww img --transition-type none $fullpath_wallpaper && wal -i $fullpath_wallpaper
             pkill waybar
             # sleep 1
             dbus-run-session waybar > ~/.waybar.log
             @end

             It accepts a fullpath image filename to set as wallpaper and call *wal* to generate corresponding colors and reload *waybar*.


    *** Cava: Console-based Audio Visualizer for Alsa

        @code bash
        paru --sync --refresh cava
        @end


        If you want waybar support, then you have to remove the installed *waybar*, as the package version doesn't support *cava* module. You need to install the supported version by =paru=:

        @code bash
        doas pacman -Rsun waybar

        paru --sync --refresh waybar-cava
        @end


        After that, enable the "cava" module in your =~/.config/waybar/config=.


    *** Vim-liked keybindings document (PDF) viewer: 

        @code bash
        doas pacman --sync --refresh zathura zathura-pdf-poppler

        #
        # Create a symbol link
        #
        doas ln -s /usr/bin/zathura /usr/bin/pdfviewer
        @end

        Then, run *pdfviewer YOUR_PDF_FILE*


        Keybindings
        @code bash
        # Keybindings     | Description                      |
        |-----------------+----------------------------------|
        | [Open and quit] |                                  |
        | q               | Quit                             |
        | :open           | Open                             |
        |                 |                                  |
        | [Navigation]    |                                  |
        | J/space         | Next page                        |
        | K               | Prev page                        |
        | j               | Move down                        |
        | k               | Move up                          |
        | C-d             | Page down                        |
        | C-u             | Page up                          |
        | gg              | Go to first page                 |
        | G               | Go to last page                  |
        | Xgg             | Go to page X, 10gg go to page 10 |
        |                 |                                  |
        | [Fit window]    |                                  |
        | a               | Fit with window height           |
        | s               | Fit with window width            |
        | d               | Toggle double-page mode          |
        |                 |                                  |
        | [Zoom]          |                                  |
        | -               | Zoom-out                         |
        | +               | Zoom-in                          |
        | =               | Overview all pages               |
        |                 |                                  |
        | [Rotation]      |                                  |
        | r               | Rotate the page                  |
        |                 |                                  |
        | [Search]        |                                  |
        | /               | Search                           |
        @end



    *** Run *Hyprland*

        You should make sure that the following services are running:

        @code bash
        systemctl --user status pipewire wireplumber 
        @end

        Otherwise, enbable it before starting =Hyprland=.

        @code bash
        Hyprland
        @end



        Also, *xdg-desktop-portal-hyprland* should start automatically:

        @code bash
        procs desktop

        # PID:▲ User  │ TTY CPU MEM CPU Time │ Command
        #             │     [%] [%]          │
        # 923   wison │     0.0 0.0 00:00:00 │ /usr/lib/xdg-desktop-portal
        # 951   wison │     0.0 0.1 00:00:00 │ /usr/lib/xdg-desktop-portal-hyprland
        # 1339  wison │     0.0 0.0 00:00:00 │ /usr/lib/xdg-desktop-portal
        # 1370  wison │     0.0 0.1 00:00:00 │ /usr/lib/xdg-desktop-portal-hyprland
        @end

        Have a look at here to know more about *xdg-desktop-portal-hyprland (XDPH)*:
        https://wiki.hyprland.org/Useful-Utilities/xdg-desktop-portal-hyprland/


    *** Install nerd font

        *Nerd Fonts* is a project that patches developer targeted fonts with a high number of glyphs (icons). Basically, it adds all popular icons into the popular fonts which call `patched font` which include the original font and all supported icons. Then you can use any of those `patched font` to show any supported icons below:

        **** Installation

             It has 7 optional ways to install *Nerd Fonts*. But for *Arch*, you can install via *AUR*. Let's take the *Source Code Pro* at an example:

             @code bash
             paru -S nerd-fonts-source-code-pro

             # If you use new version Arch Linux, use this as a replcement
             paru -S ttf-sourcecodepro-nerd
             @end


             After installing, you can run the command below to show the installed location:

             @code bash
             paru --query --list nerd-fonts-source-code-pro

             # If you use new version Arch Linux, use this as a replcement
             paru --query --list ttf-sourcecodepro-nerd

             # /usr/share/fonts/TTF/Sauce Code Pro Black Italic Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Black Italic Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Black Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Black Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Italic Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Italic Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Italic Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Italic Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Italic Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Italic Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Light Italic Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Light Italic Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Light Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Light Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Italic Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Italic Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Italic Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Italic Nerd Font Complete.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Nerd Font Complete Mono.ttf
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Nerd Font Complete.ttf
             @end


        **** Setup correct font name

             As you can see that, the font name is NOT the =Source Code Pro=!!! So you have to run the command below to know the =Real font name= which you can fill into any application's font configuration file:

             @code bash
             fc-list | grep Pro

             # /usr/share/fonts/TTF/Sauce Code Pro Light Italic Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Light Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Black Italic Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Black Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Semibold,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Bold
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Italic Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Semibold Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Italic Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Light Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Light,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Italic Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Bold
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Italic Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Medium Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Medium,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Italic Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=ExtraLight Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Italic Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Bold Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Italic Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Medium Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Light Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Light,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Bold Italic Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Bold Italic
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=ExtraLight,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Black Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Black,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Black Italic Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Black Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=ExtraLight,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Medium Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Medium,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Black Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Black,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Italic Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Semibold Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro ExtraLight Italic Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=ExtraLight Italic,Italic
             # /usr/share/fonts/TTF/Sauce Code Pro Nerd Font Complete Mono.ttf: SauceCodePro Nerd Font Mono:style=Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Semibold Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Semibold,Regular
             # /usr/share/fonts/TTF/Sauce Code Pro Light Italic Nerd Font Complete.ttf: SauceCodePro Nerd Font:style=Light Italic,Italic
             @end

             Right now, you should notice that the font name is either *SauceCodePro Nerd Font Mono* or *SauceCodePro Nerd Font*. So fill them into your application font configuration file.

             For example, put it into the *Alacritty* configuration file:

             @code conf
             # Bold italic font face
             bold_italic:

             # Font family
             #
             # If the bold italic family is not specified, it will fall back to the
             # value specified for the normal font.
             family: "SauceCodePro Nerd Font"

             # The `style` can be specified to pick a specific face.
             style: Bold Italic
             @end


        **** Copy icons from *NerdFont* cheatsheet

             After setting the correct font name, then you can copy and paste the icons from the {https://www.nerdfonts.com/cheat-sheet}[NerdFont cheatsheet] :


             Just type any searching keyword there, place the mouse on top of the one you like, it will show up a popup menu on the right-top corner. So, click =Icon= to copy to clipbobard, then you can paste to anywhere to have that icon.


        **** *Vim* support

             Add the settings below to your *vimrc* or *init.vim* (for *neovim*):

             @code bash
             # 
             Plug 'ryanoasis/vim-devicons'

             # Set the `guifont` to your patched font name with the size
             set guifont=SauceCodePro\ Nerd\ Font\ 11

             # Enable this line if you use `vim-airline`
             let g:airline_powerline_fonts = 1
             @end

             Then run *:PlugInstall* and restart `vim` to take effect.


    *** Bluetooth

        **** Install

             @code bash
             doas pacman --sync --refresh bluez bluez-utils
             @end


        **** Enable and start service

             @code bash
             doas systemctl enable bluetooth.service
             doas systemctl restart bluetooth.service
             systemctl status bluetooth.service
             @end


        **** Make sure *rfkill* doesn't block bluetooth

             *rfkill* a tool for enabling and disabling wireless device.

             @code bash
             doas rfkill list

             # 0: hci0: Bluetooth
             #         Soft blocked: no
             #         Hard blocked: no
             # 1: tpacpi_bluetooth_sw: Bluetooth
             #         Soft blocked: no
             #         Hard blocked: no
             # 2: phy0: Wireless LAN
             #         Soft blocked: no
             #         Hard blocked: no
             @end

             The case above means no block at all, that's fine. If you see it's blocked, then run the command below to unblock:

             @code bash
             doas rfkill unblock bluetooth
             @end


        **** Scan, pair, connect and trust device

             First, turn off your bluetooth device which want to connect to.

             Run *bluetoothctl*, then follow the steps below to connect:

             @code bash
             #
             # Make sure turn on the bluetooth
             #
             power on

             #
             # Enable scan, after that, bluetooth devices show up there one by one
             #
             scan on

             #
             # Right now, turn on your bluetooth device, then wait for it to show up.
             # Hopefully, it shows its name directly which you can confirm that's your device.
             # If it doesn't, only show the MAC ID, then copy that Id and run the
             # command to confirm.
             #
             info XX:XX:XX:XX:XX:XX

             #
             # Once you confirm that your device, then do:
             #
             pair XX:XX:XX:XX:XX:XX

             #
             # After pairing, you can connect to it
             #
             connect XX:XX:XX:XX:XX:XX

             #
             # Optionally, you can trust it and it will auto connect next time
             #
             trust XX:XX:XX:XX:XX:XX

             #
             # Quit
             #
             quit
             @end


             Here is the full example:

             @code bash
             #
             # Power on and scan on
             #
             [bluetooth]# Agent registered
             [bluetooth]# [CHG] Controller 50:76:AF:45:E1:BE Pairable: yes
             [bluetooth]# power on
             [bluetooth]# Changing power on succeeded
             [bluetooth]# scan on
             [bluetooth]# SetDiscoveryFilter success
             [bluetooth]# Discovery started

             #
             # Start showing scanned devices
             #
             [bluetooth]# [CHG] Controller 50:76:AF:45:E1:BE Discovering: yes
             [bluetooth]# [NEW] Device 5A:5D:6C:AA:14:90 5A-5D-6C-AA-14-90
             [bluetooth]# [NEW] Device 67:FD:70:A2:5A:FF Cellar TV
             [bluetooth]# [NEW] Device 60:21:AA:4E:F4:63 60-21-AA-4E-F4-63

             #
             # See my JBL headphone
             #
             [bluetooth]# [NEW] Device 84:D3:52:AD:CF:4F JBL TOUR ONE M2

             #
             # Pair
             #
             pair 84:D3:52:AD:CF:4F
             Attempting to pair with 84:D3:52:AD:CF:4F
             [JBL TOUR ONE M2]# [CHG] Device 84:D3:52:AD:CF:4F Bonded: yes
             [JBL TOUR ONE M2]# [CHG] Device 84:D3:52:AD:CF:4F Modalias: bluetooth:v02B0p0000d001F
             [JBL TOUR ONE M2]# [CHG] Device 84:D3:52:AD:CF:4F ServicesResolved: yes
             [JBL TOUR ONE M2]# [CHG] Device 84:D3:52:AD:CF:4F Paired: yes
             [JBL TOUR ONE M2]# Pairing successful
             [JBL TOUR ONE M2]# [CHG] Device 84:D3:52:AD:CF:4F ServicesResolved: no
             [CHG] Device 84:D3:52:AD:CF:4F Connected: no

             #
             # Connect to it after pairing
             #
             connect 84:D3:52:AD:CF:4F
             Attempting to connect to 84:D3:52:AD:CF:4F
             [CHG] Device 84:D3:52:AD:CF:4F Connected: yes
             [JBL TOUR ONE M2]# [NEW] Endpoint /org/bluez/hci0/dev_84_D3_52_AD_CF_4F/sep1
             [JBL TOUR ONE M2]# [NEW] Endpoint /org/bluez/hci0/dev_84_D3_52_AD_CF_4F/sep2
             [JBL TOUR ONE M2]# [NEW] Transport /org/bluez/hci0/dev_84_D3_52_AD_CF_4F/sep2/fd0
             [JBL TOUR ONE M2]# [CHG] Transport /org/bluez/hci0/dev_84_D3_52_AD_CF_4F/sep2/fd0 Delay: 0x05dc (1500)
             [JBL TOUR ONE M2]# Connection successful
             [JBL TOUR ONE M2]# [CHG] Transport /org/bluez/hci0/dev_84_D3_52_AD_CF_4F/sep2/fd0 Volume: 0x004f (79)
             [JBL TOUR ONE M2]# [CHG] Device 84:D3:52:AD:CF:4F ServicesResolved: yes

             #
             # Trust it after connecting
             #
             [JBL T84:D3:52:AD:CF:4Ft 84:D3:52:AD:CF:4F
             [JBL TOUR ONE M2]# [CHG] Device 84:D3:52:AD:CF:4F Trusted: yes
             [JBL TOUR ONE M2]# Changing 84:D3:52:AD:CF:4F trust succeeded

             #
             # Exit
             #
             quit
             @end


        **** *bluetoothctl* usage

            ***** List aviablable devices

                  @code bash
                  bluetoothctl list
                  # Controller 50:76:AF:45:E1:BE my-arch [default]
                  @end


            ***** List all (Paired/Connected/Trusted) deivces

                  @code bash
                  bluetoothctl devices
                  # Device 84:D3:52:AD:CF:4F JBL TOUR ONE M2

                  #
                  # Or you can list devices with filter condition: Trusted/Paired/Connected
                  #
                  bluetoothctl devices Paired
                  # Device 84:D3:52:AD:CF:4F JBL TOUR ONE M2
                  @end


        **** Connect trusted device by script

             Create *~/connect-bluetooth.sh* with the following content:

             @code bash
             #!/bin/sh
             bluetoothctl -- power on
             bluetoothctl -- connect 84:D3:52:AD:CF:4F
             @end


    *** Install *Brave* browser

        @code bash
        paru --sync --refresh brave-bin
        @end

        Open *brave* and open URL *brave://flags*, then search for *ozone*, choose *wayland* in the dropdown menu.


    *** Install chinese fonts

        @code bash
        paru --sync --refresh adobe-source-han-mono-cn-fonts \
        adobe-source-han-sans-cn-fonts \
        adobe-source-han-serif-cn-fonts
        @end


    *** AI Text-to-speech

        **** Binary

             Download binary from {https://github.com/rhasspy/piper/releases}[here]

             Then extract by running ~tar xf piper_amd64.tar.gz~


        **** Voices model files

             You can listen the voice sample from {https://rhasspy.github.io/piper-samples/}[here].

             After that, download your prefer voice from {https://github.com/rhasspy/piper/blob/master/VOICES.md}[here]

             Keep that in mind, each voice model has 2 files, the *model* link should save as *.onnx* and the *config* link should save as *.onnx.json*.

             And you have to make sure that those filenames are the SAME except the extension name, otherwise, it won't work!!!

             Move the downloaded voices file into the *piper/modles* folder (not necessary, just a good practice).

             @code bash
             ls -lht ./piper/models/

             # total 61M
             # -rw-r--r-- 1 wison wison 4.8K Jun 12 18:59 en_GB-jenny_dioco-medium.onnx.json
             # -rw-r--r-- 1 wison wison  61M Jun 12 18:56 en_GB-jenny_dioco-medium.onnx
             @end


        **** *playsound.sh*

             Create *playsound.sh* with the following content and save it into *piper* folder

             @code bash
             #!/bin/sh

             if [ "$#" -ne 1 ]; then
             echo "Mising input text."
             exit 1
             fi

             echo $1 | \
             piper --model {YOUR_PIPER_FOLDER_HERE}/models/en_GB-jenny_dioco-medium.onnx \
             --output_file ~/temp/temp.wav && \
             mpv ~/temp/temp.wav && \
             rm -rf ~/temp/temp.wav
             @end





    *** Firewall

        **** Install

             @code bash
             doas pacman --sync --refresh firewalld
             @end


             Then enable and start the service:

             @code bash
             doas systemctl enable firewalld.service
             doas systemctl restart firewalld.service
             @end


        **** *public* zone

             Make sure *public* zone is the current active zone

             @code bash
             doas firewall-cmd --get-default-zone
             # public

             doas firewall-cmd --get-active-zone
             # public (default)
             #   interfaces: enp0s5
             @end

             If NOT, then use *root* permission to edit `/etc/firewalld/firewalld.conf` and make sure:

             @code config
             DefaultZone=public
             @end

             Then reload it by running:

             @code bash
             doas firewall-cmd --reload
             @end


        **** Remove the *ssh*

             Make sure remove the *ssh* service from the open service list

             @code bash
             doas firewall-cmd --list-service
             # dhcpv6-client mdns
             @end

             If you see *ssh* is there, then run the following command to remove it and reload:

             @code bash
             doas firewall-cmd --remove-service ssh --permanent
             doas firewall-cmd --reload
             @end



        **** Add/remove custom ports

             You can add or remove custom application ports by running the following commands:

             @code bash
             #
             # Add/remove single port example
             #
             doas firewall-cmd --add-port=8080/tcp
             doas firewall-cmd --remove-port=8080/tcp

             doas firewall-cmd --add-port=9801/udp
             doas firewall-cmd --remove-port=9801/udp

             #
             # Add a rang of ports example
             #
             doas firewall-cmd --add-port=8000-8080/tcp
             doas firewall-cmd --remove-port=8000-8080/tcp

             doas firewall-cmd --add-port=9801-9809/udp
             doas firewall-cmd --remove-port=9801-9809/udp

             #
             # List ports
             #
             doas firewall-cmd --list-ports
             @end


  ** Development

    *** C/C++

        For C/C++ development, you need to install the following packages:

        @code bash
        doas pacman --sync --refresh base-devel clang llvm cmake
        @end


        Then, try to find them by running:

        @code bash
        ls -lht /usr/bin/{cc,c++,clang,clang++,clangd}

        # -rwxr-xr-x 4 root root 2.1M May  8 06:17 /usr/bin/c++*
        # lrwxrwxrwx 1 root root    3 May  8 06:17 /usr/bin/cc -> gcc*
        # lrwxrwxrwx 1 root root    8 Apr  8 01:28 /usr/bin/clang -> clang-17*
        # -rwxr-xr-x 1 root root 135K Apr  8 01:28 /usr/bin/clang++*
        @end


        **** Basic compiler options:

            ***** *-o* 

                  Write to ouput file, otherwise, output to *a.out* by default.

            ***** *-std*<standard>*

                  Specify the language standard to compile for. For example: *-std*c++14*

            ***** *-stdlib*<library>*

                  Specify the C++ standard library to use, supported options are *libstdc++* and *libc++.* If not specified, platform default will be used. 

                  For example: *-stdlib*libstdc++*

            ***** *-ansi*

                  Same as *-std*c89*

            ***** *-O* optimization

                  *-O0, -O1, -O2, -O3, -Ofast, -Os, -Oz, -Og, -O, -O4*

                  Specify which optimization level to use, *-O0* Means *no optimization*: this level compiles the fastest and generates the most debuggable code.

                  *-O* Equivalent to *-O1*.

            ***** -*Wall*

                  Enable all the warnings which the authors of *cc* believe are worthwhile. Despite the name, it will not enable all the warnings *cc* is capable of.

            ***** *-llibrary*

                  Specify a function library to be used at *link* time. The rule is that if the library is called *libsomething.a*, you give *cc* the argument *-lsomething* (without *lib* and extension part).

                  For example, the *math* library is *libm.a*, so you give *cc* the argument *-lm*.

            ***** *-pedantic-errors*

                  Error on language extensions. It requests to produce an error if a feature from a later standard revision is used in an earlier mode.

                  For example if you use *-std*c99* standard to compile your code, but you use *_Generic* which only supported from *C11*, then *clang* will stop on that error. This is very good for you to know which C standard you should use or forbidden some features in your code.


        **** Try to compile your C++ code

             For example, here is the sample *C++* source code, save it as *main.cpp*:

             @code cpp
             //
             // How to compile and run this program?
             //
             // clang++ -Wall -O -std*c++17 -stdlib*libc++ -lm main.cpp -o test && ./test
             //
             // Because `<cmath>` library is in the system default library path (`/lib/`),
             // so you don't need to use `-lm` explicitly, linker (clang++) will find it at
             // link time automatic:
             // clang++ -Wall -O -std*c++17 -stdlib*libc++ main.cpp -o test && ./test
             //
             #include <cstdint>
             #include <iostream>
             #include <cmath>

             using namespace std;

             //
             //
             //
             int add_together(int number_one, int number_2) {
                 return number_one + number_2;
             }

             //
             //
             //
             void show_info(char *name) {}

             //
             //
             //
             int main() {
                 cout << "Hi, I'm Wison:)" << endl;

                 uint8_t my_version * 0xFF;
                 bool is_success * true;

                 if (is_success) {
                     cout << "'is_success' is equal to 'true'!!!\n\n";
                 }

                 show_info((char *)"asfasdf");

                 int add_result * add_together(45, -99);
                 cout << add_result << "\n\n";

                 //
                 // C++14 feature
                 //
                 auto return_value_itself * [](auto x) { return x; };

                 int int_value * return_value_itself(888);
                 string string_value * return_value_itself("Wison Ye");

                 cout << "int_value :" << int_value << "\n";
                 cout << "string_value :" << string_value << "\n";

                 // `sqrt` comes from `<cmath>` (/usr/lib/libm.o)
                 cout << "square root result :" << sqrt(100) << endl;

                 return 0;
             }
             @end

             Then compile and run the program with the follow command:

             @code bash
             clang++ -Wall -O -std*c++17 -stdlib*libc++ main.cpp -o test && ./test
             @end



        **** Compile *C/C++* project with *cmake*
           
             *CMake* is cross-platform free and open-source software for build automation, testing, packaging and installation of software by using a compiler-independent method. *CMake* is not a build system itself.

             It generates some kind of the portable make files that is able to build by any suitable IDE or CLI environment, super useful.

             Here are the regular steps that how to use it:

            ***** Folder structure:

                  @code bash
                  .
                  ├── .clang-format
                  ├── .gitignore
                  ├── CMakeLists.txt
                  ├── build
                  └── src
                  └── main.cpp
                  @end


            ***** *CMakeLists.txt*

                  @code bash
                  cmake_minimum_required(VERSION "3.22")

                  # Indicate the compliation environment (Host OS and CPU Arch)
                  # set(CMAKE_SYSTEM_NAME Linux)
                  # set(CMAKE_SYSTEM_PROCESSOR x86_64)

                  #
                  # Generate `compile_commands.json` for editor LSP needed
                  #
                  set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

                  #
                  # Compiler and linker
                  #
                  # In `FreeBSD` `cc` and `c++` is the same with `clang` and `clang++`
                  # set(CMAKE_C_COMPILER /usr/bin/cc)
                  # set(CMAKE_CXX_COMPILER /usr/bin/c++)
                  # set(CMAKE_C_COMPILER /usr/bin/clang)
                  # set(CMAKE_CXX_COMPILER /usr/bin/clang++)

                  #
                  # Debug or Release
                  #
                  # set(CMAKE_BUILD_TYPE "Debug")
                  set(CMAKE_BUILD_TYPE "Release")

                  #
                  # Compile flags
                  #
                  set(CMAKE_C_FLAGS "-pedantic-errors -ansi -Wextra -Wall -Werror -std*gnu2x")
                  set(CMAKE_CXX_FLAGS "-pedantic-errors -Wextra -Wall -Werror -stdlib*libc++ -std*gnu++20")

                  #
                  # Project name
                  #
                  project("demo")

                  #
                  # Find installed libraries as compilation dependencies
                  # https://cmake.org/cmake/help/latest/command/find_package.html
                  #
                  # find_package(raylib REQUIRED)

                  #
                  # Extra include path for `c_utils`
                  #
                  # include_directories("~/my-installed/include/c_utils")
                  # link_directories("~/my-installed/lib")

                  #
                  # Executable
                  #
                  add_executable("${PROJECT_NAME}" "src/main.cpp")

                  #
                  # Link to system (or third-party) libraries
                  #
                  # target_link_libraries("${PROJECT_NAME}" m)
                  # target_link_libraries("${PROJECT_NAME}" raylib)

                  #
                  # Define macros for conditional compilation
                  #
                  target_compile_definitions("${PROJECT_NAME}" PRIVATE ENABLE_DEBUG_LOG)

                  #
                  # Debug log
                  #
                  message(">>> CMAKE_EXPORT_COMPILE_COMMANDS: ${CMAKE_EXPORT_COMPILE_COMMANDS}")
                  message(">>> CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
                  message(">>> CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
                  message(">>> CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
                  message(">>> CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
                  message(">>> CMAKE_C_FLAGS_DEBUG: ${CMAKE_C_FLAGS_DEBUG}")
                  message(">>> CMAKE_C_FLAGS_RELEASE: ${CMAKE_C_FLAGS_RELEASE}")
                  message(">>> CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
                  message(">>> CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
                  message(">>> CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
                  message(">>> CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")
                  message(">>> raylig_FOUND: ${raylib_FOUND}")
                  @end


            ***** *src/main.cpp*

            ***** *.gitignore*

                  @code bash
                  build
                  .cache
                  @end


            ***** *.clang-format*

                  Optionally, you can put the following settings to *.clang-format* if you want control the code format

                  @code bash
                  #---------------------------------------------------------------------------
                  #
                  # Detail options: https://clang.llvm.org/docs/ClangFormatStyleOptions.html
                  #
                  #---------------------------------------------------------------------------

                  ---
                  # `BaseOnStyle` options:
                  # `LLVM` A style complying with the LLVM coding standards
                  #
                  # `Google` A style complying with Google’s C++ style guide
                  #
                  # `Chromium` A style complying with Chromium’s style guide
                  #
                  # `Mozilla` A style complying with Mozilla’s style guide
                  #
                  # `WebKit` A style complying with WebKit’s style guide
                  #
                  # `Microsoft` A style complying with Microsoft’s style guide
                  #
                  # `GNU` A style complying with the GNU coding standards
                  BasedOnStyle: Google
                  ColumnLimit: 80
                  IndentWidth: 4
                  PPIndentWidth: 4
                  IndentPPDirectives: BeforeHash
                  AlignAfterOpenBracket: Align
                  # AlignAfterOpenBracket: AlwaysBreak
                  AllowAllParametersOfDeclarationOnNextLine: false
                  AllowShortFunctionsOnASingleLine: Inline
                  BinPackArguments: false
                  BinPackParameters: false
                  @end


            ***** Build and run

                  @code bash
                  # Make sure you're in the project root folder

                  #
                  # Create and cd into the `build` folder
                  #
                  mkdir build && cd build

                  #
                  # Generate make files into `build` folder
                  #
                  # Generate the `compile_commands.json` for `clangd_extensions` neovim plugin
                  #
                  cmake -DCMAKE_EXPORT_COMPILE_COMMANDS*1 ..

                  #
                  # Make sure you're in `build` folder, build the entire project and run
                  # the binary every time after making change to any source code.
                  #
                  make && ./demo
                  @end


        **** Terms

            ***** *make*

                  Powerful program to compile C/C++ files define in *makefile/Makefile/MAKEFILE*. It always look at the first target (which follow by a *:*) if you don't provide any *target* as argument.

                  The usual way to compile and install a program is by running *make && make install*.

                  *install* target means copy all binaries to the default binary path, e.g. */usr/bin*.

                  If you want to uninstall/remove all copied binaries, run *make uninstall*.

                  If you want to clean all compiled binaries and object files, run *make clean*.


            ***** *gmake*: GNU make

            ***** *lldb*: LLVM debugger

            ***** *gdb*: GNU debugger

            ***** *clangd*: A language server

    *** Hare

  ** Hardware tweaks
    *** Thinkpad X1 Yoga Gen 3

    *** Hardware information

        Information comes from *dmidecode* output:

        **** System Information

             @code bash
             Manufacturer: LENOVO
             Product Name: 20LES4MF00
             Version: ThinkPad X1 Yoga 3rd
             Serial Number: R90SW4EG
             UUID: e700174c-3576-11b2-a85c-9d756357a7fc
             Wake-up Type: Power Switch
             SKU Number: LENOVO_MT_20LE_BU_Think_FM_ThinkPad X1 Yoga 3rd
             Family: ThinkPad X1 Yoga 3rd
             @end


        **** Base Board Information

             @code bash
             Manufacturer: LENOVO
             Product Name: 20LES4MF00
             Version: SDK0J40697 WIN
             Serial Number: W2KS8CT10KA
             Asset Tag: Not Available
             Features:
             Board is a hosting board
             Board is replaceable
             Location In Chassis: Not Available
             Chassis Handle: 0x0000
             Type: Motherboard
             Contained Object Handles: 0
             @end


        **** Chassis Information 

             @code bash
             Manufacturer: LENOVO
             Type: Convertible
             Lock: Not Present
             Version: None
             Serial Number: R90SW4EG
             Asset Tag: LT58841
             Boot-up State: Unknown
             Power Supply State: Unknown
             Thermal State: Unknown
             Security Status: Unknown
             OEM Information: 0x00000000
             Height: Unspecified
             Number Of Power Cords: Unspecified
             Contained Elements: 0
             SKU Number: Not Specified
             @end


        **** Battery

             @code bash
             Location: Front
             Manufacturer: Celxpert
             Name: 01AV475
             Design Capacity: 54060 mWh
             Design Voltage: 15360 mV
             SBDS Version: 03.01
             Maximum Error: Unknown
             SBDS Serial Number: 1389
             SBDS Manufacture Date: 2018-11-26
             SBDS Chemistry: LiP
             OEM-specific Information: 0x00000000
             @end


        **** CPU

             Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz

             @code bash
             Socket Designation: U3E1
             Type: Central Processor
             Family: Core i7
             Manufacturer: Intel(R) Corporation
             ID: EA 06 08 00 FF FB EB BF
             Signature: Type 0, Family 6, Model 142, Stepping 10
             Version: Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz
             Voltage: 1.1 V
             External Clock: 100 MHz
             Max Speed: 2100 MHz
             Current Speed: 1900 MHz
             Status: Populated, Enabled
             Upgrade: Socket BGA1356
             L1 Cache Handle: 0x0007
             L2 Cache Handle: 0x0008
             L3 Cache Handle: 0x0009
             Serial Number: None
             Asset Tag: None
             Part Number: None
             Core Count: 4
             Core Enabled: 4
             @end


        **** Memory Device

             16GB soldered LPDDR3 2133 MT/s:

             @code bash
             #
             # ChannelA-DIMM0
             #
             Array Handle: 0x0003
             Error Information Handle: Not Provided
             Total Width: 64 bits
             Data Width: 64 bits
             Size: 8 GB
             Form Factor: Row Of Chips
             Set: None
             Locator: ChannelA-DIMM0
             Bank Locator: BANK 0
             Type: LPDDR3
             Type Detail: Synchronous Unbuffered (Unregistered)
             Speed: 2133 MT/s
             Manufacturer: Samsung
             Serial Number: 55000000
             Asset Tag: None
             Part Number: K4EBE304EB-EGCG
             Rank: 2
             Configured Memory Speed: 2133 MT/s
             Minimum Voltage: Unknown
             Maximum Voltage: Unknown
             Configured Voltage: 1.2 V

             #
             # ChannelB-DIMM0
             #
             Array Handle: 0x0003
             Error Information Handle: Not Provided
             Total Width: 64 bits
             Data Width: 64 bits
             Size: 8 GB
             Form Factor: Row Of Chips
             Set: None
             Locator: ChannelB-DIMM0
             Bank Locator: BANK 2
             Type: LPDDR3
             Type Detail: Synchronous Unbuffered (Unregistered)
             Speed: 2133 MT/s
             Manufacturer: Samsung
             Serial Number: 55000000
             Asset Tag: None
             Part Number: K4EBE304EB-EGCG
             Rank: 2
             Configured Memory Speed: 2133 MT/s
             Minimum Voltage: Unknown
             Maximum Voltage: Unknown
             Configured Voltage: 1.2 V
             @end


        **** BIOS information

             @code bash
             Vendor: LENOVO
             Version: N25ET63W (1.49 )
             Release Date: 12/20/2022
             Address: 0xE0000
             Runtime Size: 128 kB
             ROM Size: 16 MB
             Characteristics:
             PCI is supported
             PNP is supported
             BIOS is upgradeable
             BIOS shadowing is allowed
             Boot from CD is supported
             Selectable boot is supported
             EDD is supported
             3.5"/720 kB floppy services are supported (int 13h)
             Print screen service is supported (int 5h)
             8042 keyboard services are supported (int 9h)
             Serial services are supported (int 14h)
             Printer services are supported (int 17h)
             CGA/mono video services are supported (int 10h)
             ACPI is supported
             USB legacy is supported
             BIOS boot specification is supported
             Targeted content distribution is supported
             UEFI is supported
             BIOS Revision: 1.49
             Firmware Revision: 1.21
             @end


    *** Fix touchscreen after resume

        Touchscreen doesn't work after suspend and resume, here is the solution:

        **** Install *acpi_call* kernel module

             @code bash
             #
             # If you use normal kernel
             #
             # doas pacman --sync --refresh acpi_call

             #
             # If you use `lts` kernel
             #
             doas pacman --sync --refresh acpi_call-lts
             @end


        **** Create service

             Create */etc/systemd/system/activate-touch-hack.service* with the following contents:

             @code bash
             [Unit]
             Description=Touch wake Thinkpad X1 Yoga 3rd gen hack
             After=suspend.target hibernate.target hybrid-sleep.target suspend-then-hibernate.target

             [Service]
             ExecStart=/bin/sh -c "echo '\\_SB.PCI0.LPCB.EC._Q2A'  > /proc/acpi/call"

             [Install]
             WantedBy=suspend.target hibernate.target hybrid-sleep.target suspend-then-hibernate.target
             @end


             Enable service:

             @code bash
             doas systemctl enable activate-touch-hack.service
             @end


        **** Reboot to take affect

             Make sure *acpi_call* module has been loaded:

             @code bash
             lsmod | rg acpi_call

             # acpi_call              16384  0 
             @end


             Make sure =/proc/acpi/call= exists:

             @code bash
             ls -lht /proc/acpi/call

             # -rw-rw---- 1 root root 0 May 23 17:56 /proc/acpi/call
             @end


             Now, it should work as expected.


    *** Auto rotation

        Auto rotate monitor and touch pad and tablet based on builtin *Accelerometer* sensor

        **** Install *iio-sensor-proxy*

             @code bash
             #
             # Install
             #
             doas pacman --sync --refresh iio-sensor-proxy

             #
             # Enable service
             #
             doas systemctl enable iio-sensor-proxy.service

             #
             # Start service
             #
             doas systemctl restart iio-sensor-proxy.service
             @end


             Test it by running =monitor-sensor=:

             @code bash
             monitor-sensor --all

             #     Waiting for iio-sensor-proxy to appear
             # +++ iio-sensor-proxy appeared
             # === Has accelerometer (orientation: normal)
             # === Has ambient light sensor (value: 17.133001, unit: lux)
             # === No proximity sensor
             #     Light changed: 24.325001 (lux)
             #     Accelerometer orientation changed: right-up
             #     Accelerometer orientation changed: left-up
             #     Light changed: 55.843003 (lux)
             #     Accelerometer orientation changed: bottom-up
             #     Light changed: 40.507002 (lux)
             #     Light changed: 31.517001 (lux)
             #     Accelerometer orientation changed: normal
             #     Light changed: 97.515005 (lux)
             #     Light changed: 25.066001 (lux) 
             @end

             Rotate your laptop and you should see the above sensor events.


        **** Install *iio-hyprland*

             @code bash
             cd ~/temp
             git clone --depth=1 git@github.com:wisonye/iio-hyprland.git
             cd iio-hyprland
             cd c
             ./configure.sh
             doas ./install.sh
             @end


             Start it in *~/.config/hypr/hyprland.conf*:

             @code conf
             #
             # Auto rotate monitor and touchpad/Tablet when detected orientation changed
             #
             exec-once = iio-hyprland
             @end

             Restart *Hyprland* to take affect.

  ** How to
    *** How to show hardware info

        **** *fastfetch* for overview

             CPU, GPU, RAM, Disk, Battery...

             @code bash
             fastfetch

             #                    -`                     wison@my-arch
             #                   .o+`                    -------------
             #                  `ooo/                    OS: Arch Linux x86_64
             #                 `+oooo:                   Host: 20LES4MF00 (ThinkPad X1 Yoga 3rd)
             #                `+oooooo:                  Kernel: Linux 6.6.31-1-lts
             #                -+oooooo+:                 Uptime: 39 mins
             #              `/:-:++oooo+:                Packages: 561 (pacman)
             #             `/++++/+++++++:               Shell: fish 3.7.1
             #            `/++++++++++++++:              Display (CMN14E1): 1920x1080 @ 60Hz [Built-in]
             #           `/+++ooooooooooooo/`            WM: Hyprland (Wayland)
             #          ./ooosssso++osssssso+`           Cursor: Adwaita
             #         .oossssso-````/ossssss+`          Terminal: tmux 3.4
             #        -osssssso.      :ssssssso.         CPU: Intel(R) Core(TM) i7-8650U (8) @ 4.20 GHz
             #       :osssssss/        osssso+++.        GPU: Intel UHD Graphics 620 @ 1.15 GHz [Integrated]
             #      /ossssssss/        +ssssooo/-        Memory: 1.17 GiB / 15.37 GiB (8%)
             #    `/ossssso+/:-        -:/+osssso+-      Swap: 0 B / 4.00 GiB (0%)
             #   `+sso+:-`                 `.-/+oso:     Disk (/): 7.02 GiB / 467.40 GiB (2%) - ext4
             #  `++:.                           `-/+/    Local IP (wlp2s0): 192.168.1.183/24 *
             #  .`                                 `/    Battery: 56% [Discharging]
             #                                           Locale: en_US.UTF-8
             @end


        **** CPU

             @code bash
             lscpu | bat

             # Architecture:                         x86_64
             # CPU op-mode(s):                       32-bit, 64-bit
             # Address sizes:                        39 bits physical, 48 bits virtual
             # Byte Order:                           Little Endian
             # CPU(s):                               8
             # On-line CPU(s) list:                  0-7
             # Vendor ID:                            GenuineIntel
             # Model name:                           Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz
             # CPU family:                           6
             # Model:                                142
             # Thread(s) per core:                   2
             # Core(s) per socket:                   4
             # Socket(s):                            1
             # Stepping:                             10
             # CPU(s) scaling MHz:                   37%
             # CPU max MHz:                          4200.0000
             # CPU min MHz:                          400.0000
             # BogoMIPS:                             4201.88
             # Virtualization:                       VT-x
             # L1d cache:                            128 KiB (4 instances)
             # L1i cache:                            128 KiB (4 instances)
             # L2 cache:                             1 MiB (4 instances)
             # L3 cache:                             8 MiB (1 instance)
             # NUMA node(s):                         1
             # NUMA node0 CPU(s):                    0-7
             @end


        **** CPU current frequency

             @code bash
             bat /proc/cpuinfo | rg "cpu MHz"

             # cpu MHz         : 1943.300
             # cpu MHz         : 2121.079
             # cpu MHz         : 1721.701
             # cpu MHz         : 1945.442
             # cpu MHz         : 818.975
             # cpu MHz         : 400.000
             # cpu MHz         : 2000.231
             # cpu MHz         : 994.163 
             @end

             Or you can open =btop= to see.


        **** GPU

             @code bash
             lspci -v | rg -A10 "VGA compatible"

             # 00:02.0 VGA compatible controller: Intel Corporation UHD Graphics 620 (rev 07) (prog-if 00 [VGA controller])
             #         Subsystem: Lenovo Device 2259
             #         Flags: bus master, fast devsel, latency 0, IRQ 159
             #         Memory at 2ffa000000 (64-bit, non-prefetchable) [size=16M]
             #         Memory at 2fa0000000 (64-bit, prefetchable) [size=256M]
             #         I/O ports at e000 [size=64]
             #         Expansion ROM at 000c0000 [virtual] [disabled] [size=128K]
             #         Capabilities: <access denied>
             #         Kernel driver in use: i915
             #         Kernel modules: i915
             @end


        **** Network

             @code bash
             lspci -v | rg -A6 -e "Ethernet controller" -e "Network controller"

             # 00:1f.6 Ethernet controller: Intel Corporation Ethernet Connection (4) I219-LM (rev 21)
             #         Subsystem: Lenovo Device 2259
             #         Flags: bus master, fast devsel, latency 0, IRQ 140
             #         Memory at ee300000 (32-bit, non-prefetchable) [size=128K]
             #         Capabilities: <access denied>
             #         Kernel driver in use: e1000e
             #         Kernel modules: e1000e
             # --
             # 02:00.0 Network controller: Intel Corporation Wireless 8265 / 8275 (rev 78)
             #         Subsystem: Intel Corporation Dual Band Wireless-AC 8265 [Windstorm Peak]
             #         Flags: bus master, fast devsel, latency 0, IRQ 158
             #         Memory at ee200000 (64-bit, non-prefetchable) [size=8K]
             #         Capabilities: <access denied>
             #         Kernel driver in use: iwlwifi
             #         Kernel modules: iwlwifi
             @end


        **** Battery

    *** How to clean cache

        @code bash
        # Show how much your cache hold the disk space
        dust -d1 ~/.cache

        # Clean paru cache and unneeded dependencies
        paru -Scc
        rm -rf ~/.cache/paru/clone/*

        # Clean pacman cache (it locates `/var/cache/pacman/pkg/`)
        doas pacman -Scc

        # Clean yarn (if you installed)
        yarn cache clean

        # Clean google-chrome cache (sometimes, this folder is huge!)
        rm -rf ~/.cache/google-chrome/Default

        # After that, calculate again, it should get big improved.
        dust -d1 ~/.cache

        #
        # Clean cargo install stuff
        #
        cargo install cargo-cache
        cargo cache --autoclean
        @end

        **** How to remove unused (dependencies) packages

             List only before removing:

             @code bash
             # -Q: Query packages.
             # -d: List packages installed as dependencies [filter].
             # -q: Show less information for query and search.
             # -t: List packages not (optionally) required by any.
             pacman -Qqtd 
             @end


             After you confirm, remove all of them:

             @code bash
             # -R: Remove packages.
             # -s: Remove unnecessary dependencies.
             # -u: Remove unneeded packages.
             # -n: Remove configuration file(s) too.
             # - : Read package list from standard input/pipe. In this case read
             #     output of query command (pacman -Qqd) and remove them using
             #     the pacman -Rns - command.
             pacman -Qtdq | doas pacman -Rns - 
             @end


    *** How to use *hyprctl*


        How to use *hyprctl*

        @code bash
        
        | Command              | Description                                                                                  |
        |----------------------+----------------------------------------------------------------------------------------------|
        | version              | prints the hyprland version, meaning flags, commit and branch of build.                      |
        | monitors             | lists active outputs with their properties, 'monitors all' lists active and inactive outputs |
        | workspaces           | lists all workspaces with their properties                                                   |
        | activeworkspace      | gets the active workspace and its properties                                                 |
        | workspacerules       | gets the list of defined workspace rules                                                     |
        | clients              | lists all windows with their properties                                                      |
        | devices              | lists all connected keyboards and mice                                                       |
        | decorations [window] | lists all decorations and their info                                                         |
        | binds                | lists all registered binds                                                                   |
        | activewindow         | gets the active window name and its properties                                               |
        | layers               | lists all the layers                                                                         |
        | splash               | prints the current random splash                                                             |
        | getoption [option]   | gets the config option status (values)                                                       |
        | cursorpos            | gets the current cursor pos in global layout coordinates                                     |
        | animations           | gets the current config'd info about animations and beziers                                  |
        | instances            | lists all running instances of hyprland with their info                                      |
        | layouts              | lists all layouts available (including plugin'd ones)                                        |
        |                      |                                                                                              |

        More examples from [[https://wiki.hyprland.org/Configuring/Using-hyprctl/][here]]

        @end


        **** How to exit Hyprland

             Make sure you exit *tmux* before doing that!!!
             Make sure you exit *tmux* before doing that!!!
             Make sure you exit *tmux* before doing that!!!

             @code bash
             hyprctl dispatch exit
             @end


        **** List all monitors

             @code bash
             hyprctl monitors all

             # Monitor HDMI-A-1 (ID 0):
             #       3840x2160@60.00000 at 0x0
             #       description: LG Electronics LG HDR 4K 0x0003B9F0 (HDMI-A-1)
             #       make: LG Electronics
             #       model: LG HDR 4K
             #       serial: 0x0003B9F0
             #       active workspace: 1 (1)
             #       special workspace: 0 ()
             #       reserved: 0 0 0 0
             #       scale: 1.50
             #       transform: 0
             #       focused: yes
             #       dpmsStatus: 1
             #       vrr: 0
             #       activelyTearing: false
             @end


        **** List all bindings

             @code bash
             hyprctl binds
             @end


        **** Force to reload configuration

             @code bash
             hyprctl reload 
             @end


        **** Apply settings dynamically

             Use ~hyprctl keyword~ to apply settings dynamically.


             @code bash
             #
             # For example, temporary set 'SUPER + U' to fullscreen
             #
             hyprctl keyword bind SUPER, U, fullscreen 

             #
             # For example, temporary set monitor resolution
             #
             hyprctl keyword monitor HDMI1,2560x2880@60,0x0,1
             @end


        **** Send notification

             `hyprctl notify [ICON] [TIME_MS] [COLOR] [MESSAGE]`


             - Icon options

             @code bash

             | Integer value | Description |
             |---------------+-------------|
             | ~-1~            | No ICONS    |
             | ~0~             | WARNING     |
             | ~1~             | INFO        |
             | ~2~             | HINT        |
             | ~3~             | ERROR       |
             | ~4~             | CONFUSED    |
             | ~5~             | OK          |
             @end



             @code bash
             # OK category
             hyprctl notify 0 5000 "rgb(FF9F1C)" " Network is down."
             hyprctl notify 1 5000 "rgb(ACE6FE)" " Email sent."
             hyprctl notify 3 5000 "rgb(f44747)" " Task failed."
             hyprctl notify 5 5000 "rgb(6fc3df)" " Email sent."
             @end



    *** How to solve *llvm/gcc/glic* version issue

        **** /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.32' not found

             Upgrade to latest version:

             @code bash
             doas pacman --sync --refresh gcc gcc-libs libgccjit
             @end


        **** error while loading shared libraries: libLLVM-XX.so: cannot open shared object file: No such file or directory

             Upgrade to latest version:

             @code bash
             doas pacman --sync --refresh llvm-libs
             @end


        **** cmake error:

             @code bash
             cmake: src/unix/process.c:972: uv_spawn: Assertion `!(options->flags & ~(UV_PROCESS_DETACHED | UV_PROCESS_SETGID | UV_PROCESS_SETUID | UV_PROCESS_WINDOWS_HIDE | UV_PROCESS_WINDOWS_HIDE_CONSOLE | UV_PROCESS_WINDOWS_HIDE_GUI | UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS))' failed.
             ./configure.sh: line 21:  7312 Aborted                 (core dumped) cmake -S ./cmake -B ./temp_build/build_memory_leak_checking -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}
             @end

             Upgrade to latest version:

             @code bash
             doas pacman --sync --refresh libluv libuv cmake
             @end

    *** How to Solve *neovim* treesitter issue

        When you see this error:

        @code bash
        nvim: symbol lookup error: nvim: undefined symbol: ts_query_cursor_set_match_limit
        @end

        That means your *tree-sitter* version is too old, upgrade to latest:

        @code bash
        doas pacman --sync --refresh tree-sitter
        @end

    *** How to solve *pacman* can't run

        When you run *doas pacman --sync --refresh XXXX* to upgrade the installed program, it updates *icu* (or another important shared libraries) partially, sometimes it will cause *pacman* can't run anymore like this:

        @code bash
        pacman error while loading shared libraries libicuuc.so.74: cannot open shared object file: No such file or directory
        @end

        That's because *pacman* relies on that *libicuuc.so.74* shared library to run but that library has been upgraded to a higher version, that's why *pacman* can't run anymore.

        That said, you can't run *doas pacman -Syu* to upgrade the rest of the system, as *pacman* binary doesn't work!!!!

        So, you have to download the latest runnable version of Pacman binary (statically linked) to upgrade the rest of your system. You need to go to *pacman-static* AUR (https://aur.archlinux.org/packages/pacman-static) to find the Pre compiled binaries and download it.

        For example:

        @code bash
        cd ~/temp
        "https://pkgbuild.com/~morganamilo/pacman-static/x86_64/bin/pacman-static" -O ./pacman-static
        chmod +x ./pacman-static
        
        #
        # Upgrade the rest of the installed binaries
        #
        doas ./pacman-static -Syu
        
        #
        # Do a reboot to take affect
        #
        doas reboot
        @end



